import json
from typing import List, Tuple
import yagmail
from core.auth import GoogleAuth
from core.sheet_tools import SheetWrapper
from core.config import Config
from core.utils import retry_until_success  # üîÅ –¥–æ–±–∞–≤–ª–µ–Ω retry


def load_emails(sheet: SheetWrapper, column_name: str) -> List[Tuple[int, str]]:
    df = retry_until_success(sheet.get_dataframe)
    if column_name not in df.columns:
        raise ValueError(f"–ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    emails = df[column_name].fillna("").tolist()
    return [(i + 2, email) for i, email in enumerate(emails)]  # +2: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 0-index


def send_emails(email_data: List[Tuple[int, str]], subject: str, body: str,
                sent_emails_path: str, invalid_rows_path: str):
    yag = yagmail.SMTP(
        user=Config.EMAIL_ADDRESS,
        password=Config.EMAIL_KEY,
        host=Config.EMAIL_HOST,
        port=int(Config.EMAIL_PORT)
    )
    sent_emails = []
    invalid_rows = []

    for row_number, email in email_data:
        if '@' not in email:
            invalid_rows.append(row_number)
            print(f"[‚úò] –ù–µ–≤–µ—Ä–Ω—ã–π email –≤ —Å—Ç—Ä–æ–∫–µ {row_number}: {email}")
            continue

        try:
            retry_until_success(yag.send, to=email, subject=subject, contents=body)
            sent_emails.append(email)
            print(f"[‚úî] –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email} (—Å—Ç—Ä–æ–∫–∞ {row_number})")
        except Exception as e:
            print(f"[‚ö†] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {email} (—Å—Ç—Ä–æ–∫–∞ {row_number}): {e}")
            invalid_rows.append(row_number)

    with open(sent_emails_path, "w", encoding="utf-8") as f:
        json.dump(sent_emails, f, ensure_ascii=False, indent=2)
    with open(invalid_rows_path, "w", encoding="utf-8") as f:
        json.dump(invalid_rows, f, ensure_ascii=False, indent=2)


def run():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI"""
    try:
        with open("email_template.json", "r", encoding="utf-8") as f:
            template = json.load(f)
    except FileNotFoundError:
        print("[‚úò] –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª email_template.json.")
        return

    subject = template.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
    body = template.get("body", "")

    sheet = SheetWrapper(Config.BASE_DSIN_CMC)
    email_column = "–ü–æ—á—Ç–∞"  # –Ω–∞—Å—Ç—Ä–æ–π –ø–æ –Ω—É–∂–Ω–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É
    emails = load_emails(sheet, email_column)

    send_emails(
        email_data=emails,
        subject=subject,
        body=body,
        sent_emails_path="sent_emails.json",
        invalid_rows_path="invalid_rows.json"
    )
