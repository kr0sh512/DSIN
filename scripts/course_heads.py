from core.auth import GoogleAuth
from core.config import Config
from core.utils import retry_until_success, rollback_on_failure  # üõ°Ô∏è –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
from gspread_formatting import set_column_width
import gspread


def format_course_sheet(worksheet: gspread.Worksheet, rows_num: int):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–≥–æ–ª–æ–≤–∫–∏, –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏, —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤."""
    retry_until_success(worksheet.update_cell, 1, 7, '–°—Ç–∞—Ç—É—Å')
    retry_until_success(worksheet.update_cell, 1, 8, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')

    set_column_width(worksheet, 'A:G', 120)

    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    data_validation_rule = {
        "condition": {
            "type": "ONE_OF_LIST",
            "values": [
                {"userEnteredValue": "–∑–∞–∫—Ä—ã–ª—Å—è"},
                {"userEnteredValue": "–∑–∞–¥–æ–ª–∂."},
                {"userEnteredValue": "–∞–∫–∞–¥–µ–º."},
                {"userEnteredValue": "–æ—Ç—á–∏—Å–ª–µ–Ω"}
            ]
        },
        "showCustomUi": True,
        "strict": True
    }

    request = {
        "setDataValidation": {
            "range": {
                "sheetId": worksheet.id,
                "startRowIndex": 1,
                "endRowIndex": rows_num + 1,
                "startColumnIndex": 6,
                "endColumnIndex": 7
            },
            "rule": data_validation_rule
        }
    }

    retry_until_success(worksheet.spreadsheet.batch_update, {"requests": [request]})

    # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
    start_row = 1
    end_row = rows_num + 1
    requests = []

    for row in range(start_row, end_row + 1):
        if row % 2 == 0:
            requests.append({
                "repeatCell": {
                    "range": {
                        "sheetId": worksheet.id,
                        "startRowIndex": row - 1,
                        "endRowIndex": row,
                        "startColumnIndex": 0,
                        "endColumnIndex": worksheet.col_count
                    },
                    "cell": {
                        "userEnteredFormat": {
                            "backgroundColor": {
                                "red": 1.0,
                                "green": 1.0,
                                "blue": 0.9
                            }
                        }
                    },
                    "fields": "userEnteredFormat.backgroundColor"
                }
            })

    if requests:
        retry_until_success(worksheet.spreadsheet.batch_update, {"requests": requests})


def run():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI"""
    auth = GoogleAuth()
    gc = auth.get_gspread_client()

    spreadsheet = retry_until_success(gc.open_by_key, Config.SPREADSHEET_ID_COURSE_HEADS)
    worksheet = spreadsheet.sheet1
    rows_num = len(retry_until_success(worksheet.get_all_values)) - 1

    with rollback_on_failure(worksheet, description="—Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–æ–≤"):
        format_course_sheet(worksheet, rows_num)

    print("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
